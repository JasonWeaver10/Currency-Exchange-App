{"ast":null,"code":"var _jsxFileName = \"/Users/jason/projects/react/currency-exchange/Currency-Exchange-App/src/Chart.js\";\nimport React from 'react';\nconst countryList = [\"GBP\", \"CAD\", \"USD\", \"AUD\", \"BGN\", \"BRL\", \"CHF\", \"CNY\", \"CZK\", \"DKK\", \"EUR\", \"HKD\", \"HRK\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"ISK\", \"JPY\", \"KRW\", \"MXN\", \"MYR\", \"NOK\", \"NZD\", \"PHP\", \"PLN\", \"RON\", \"RUB\", \"SEK\", \"SGD\", \"THB\", \"TRY\", \"ZAR\"];\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeBase = e => {\n      this.setState({\n        base: e.target.value\n      }, this.getHistoricalRates);\n    };\n\n    this.handleChangeOther = e => {\n      this.setState({\n        other: e.target.value\n      }, this.getHistoricalRates);\n    };\n\n    this.buildChart = (labels, data, label) => {\n      const chartRef = this.chartRef.current.getContext(\"2d\");\n\n      if (typeof this.chart !== \"undefined\") {\n        this.chart.destroy();\n      }\n\n      this.chart = new Chart(this.chartRef.current.getContext(\"2d\"), {\n        type: 'line',\n        data: {\n          labels,\n          datasets: [{\n            label: label,\n            data,\n            fill: false,\n            tension: 0\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    };\n\n    this.getHistoricalRates = (base, other) => {\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      fetch(`https://alt-exchange-rate.herokuapp.com/history?start_at=${startDate}&end_at=${endDate}&base=${base}&symbols=${other}`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Request was either a 404 or 500');\n      }).then(data => {\n        if (data.error) {\n          throw new Error(data.error);\n        }\n\n        const chartLabels = Object.keys(data.rates);\n        const chartData = Object.values(data.rates).map(rate => rate[other]);\n        const chartLabel = `${base}/${other}`;\n        this.buildChart(chartLabels, chartData, chartLabel);\n      }).catch(error => console.error(error.message));\n    };\n\n    this.state = {\n      base: 'GBP',\n      other: 'USD'\n    };\n    this.handleChangeBase = this.handleChangeBase.bind(this);\n    this.handleChangeOther = this.handleChangeOther.bind(this);\n    this.buildChart = this.buildChart.bind(this);\n    this.getHistoricalRates = this.getHistoricalRates.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      base,\n      other\n    } = this.state;\n    this.getHistoricalRates(base, other);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"welcomeOuter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"welcomeInner table-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"table-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, \"Historical Currency Rate Comparison\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"table-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, \"Chart displays the past 30 days of currency rates selected\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"table-dark phoneView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, \"Base Currency:\"), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"phoneView\",\n      onChange: this.handleChangeBase,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, countryList.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country,\n      label: country,\n      value: country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 59\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"table-dark phoneView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, \"Comparison Currency\"), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"phoneView\",\n      onChange: this.handleChangeOther,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, countryList.map(country => /*#__PURE__*/React.createElement(\"option\", {\n      key: country,\n      label: country,\n      value: country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 59\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/jason/projects/react/currency-exchange/Currency-Exchange-App/src/Chart.js"],"names":["React","countryList","Chart","Component","constructor","props","handleChangeBase","e","setState","base","target","value","getHistoricalRates","handleChangeOther","other","buildChart","labels","data","label","chartRef","current","getContext","chart","destroy","type","datasets","fill","tension","options","responsive","endDate","Date","toISOString","split","startDate","getTime","fetch","then","response","ok","json","Error","error","chartLabels","Object","keys","rates","chartData","values","map","rate","chartLabel","catch","console","message","state","bind","componentDidMount","render","country"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAG,CAChB,KADgB,EACT,KADS,EACF,KADE,EACK,KADL,EACY,KADZ,EACmB,KADnB,EAC0B,KAD1B,EACiC,KADjC,EACwC,KADxC,EAC+C,KAD/C,EACsD,KADtD,EAC6D,KAD7D,EACoE,KADpE,EAC2E,KAD3E,EACkF,KADlF,EACyF,KADzF,EACgG,KADhG,EACuG,KADvG,EAC8G,KAD9G,EACqH,KADrH,EAC4H,KAD5H,EACmI,KADnI,EAC0I,KAD1I,EACiJ,KADjJ,EACwJ,KADxJ,EAC+J,KAD/J,EACsK,KADtK,EAC6K,KAD7K,EACoL,KADpL,EAC2L,KAD3L,EACkM,KADlM,EACyM,KADzM,EACgN,KADhN,CAApB;;AAIA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SAmBpBC,gBAnBoB,GAmBAC,CAAD,IAAO;AACrB,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAEF,CAAC,CAACG,MAAF,CAASC;AAAhB,OAAd,EAAqC,KAAKC,kBAA1C;AAEJ,KAtBmB;;AAAA,SAwBpBC,iBAxBoB,GAwBCN,CAAD,IAAO;AACtB,WAAKC,QAAL,CAAc;AAACM,QAAAA,KAAK,EAAEP,CAAC,CAACG,MAAF,CAASC;AAAjB,OAAd,EAAsC,KAAKC,kBAA3C;AAGJ,KA5BmB;;AAAA,SA8BpBG,UA9BoB,GA8BP,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,KAAyB;AAClC,YAAMC,QAAQ,GAAG,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAjB;;AACA,UAAI,OAAO,KAAKC,KAAZ,KAAsB,WAA1B,EAAuC;AACrC,aAAKA,KAAL,CAAWC,OAAX;AACD;;AACD,WAAKD,KAAL,GAAa,IAAIpB,KAAJ,CAAU,KAAKiB,QAAL,CAAcC,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAV,EAAkD;AAC7DG,QAAAA,IAAI,EAAE,MADuD;AAE7DP,QAAAA,IAAI,EAAE;AACJD,UAAAA,MADI;AAEJS,UAAAA,QAAQ,EAAE,CACR;AACEP,YAAAA,KAAK,EAAEA,KADT;AAEED,YAAAA,IAFF;AAGES,YAAAA,IAAI,EAAE,KAHR;AAIEC,YAAAA,OAAO,EAAE;AAJX,WADQ;AAFN,SAFuD;AAa7DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,UAAU,EAAE;AADL;AAboD,OAAlD,CAAb;AAiBD,KApDiB;;AAAA,SAsDpBjB,kBAtDoB,GAsDC,CAACH,IAAD,EAAOK,KAAP,KAAiB;AAClC,YAAMgB,OAAO,GAAG,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAhB;AACA,YAAMC,SAAS,GAAG,IAAIH,IAAJ,CAAU,IAAIA,IAAJ,EAAD,CAAWI,OAAX,KAAwB,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IAArD,EAA4DH,WAA5D,GAA0EC,KAA1E,CAAgF,GAAhF,EAAqF,CAArF,CAAlB;AAEAG,MAAAA,KAAK,CAAE,4DAA2DF,SAAU,WAAUJ,OAAQ,SAAQrB,IAAK,YAAWK,KAAM,EAAvH,CAAL,CAA+HuB,IAA/H,CAAqIC,QAAD,IAAc;AAElJ,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACb,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,cAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACE,OANJ,EAMMJ,IANN,CAMWpB,IAAI,IAAI;AACjB,YAAIA,IAAI,CAACyB,KAAT,EAAgB;AACd,gBAAM,IAAID,KAAJ,CAAUxB,IAAI,CAACyB,KAAf,CAAN;AACD;;AACD,cAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY5B,IAAI,CAAC6B,KAAjB,CAApB;AACA,cAAMC,SAAS,GAAGH,MAAM,CAACI,MAAP,CAAc/B,IAAI,CAAC6B,KAAnB,EAA0BG,GAA1B,CAA8BC,IAAI,IAAIA,IAAI,CAACpC,KAAD,CAA1C,CAAlB;AACA,cAAMqC,UAAU,GAAI,GAAE1C,IAAK,IAAGK,KAAM,EAApC;AACA,aAAKC,UAAL,CAAgB4B,WAAhB,EAA6BI,SAA7B,EAAwCI,UAAxC;AACD,OAdD,EAeCC,KAfD,CAeOV,KAAK,IAAIW,OAAO,CAACX,KAAR,CAAcA,KAAK,CAACY,OAApB,CAfhB;AAgBH,KA1EmB;;AAEhB,SAAKC,KAAL,GAAa;AACT9C,MAAAA,IAAI,EAAE,KADG;AAETK,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH,SAAKR,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBkD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAK3C,iBAAL,GAAyB,KAAKA,iBAAL,CAAuB2C,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKzC,UAAL,GAAkB,KAAKA,UAAL,CAAgByC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAK5C,kBAAL,GAA0B,KAAKA,kBAAL,CAAwB4C,IAAxB,CAA6B,IAA7B,CAA1B;AAEA;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEhD,MAAAA,IAAF;AAAQK,MAAAA;AAAR,QAAkB,KAAKyC,KAA7B;AACA,SAAK3C,kBAAL,CAAwBH,IAAxB,EAA8BK,KAA9B;AACH;;AA8DD4C,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,eAEI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAFJ,eAGI;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,QAAQ,EAAE,KAAKpD,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKL,WAAW,CAACgD,GAAZ,CAAiBU,OAAD,iBAAa;AAAQ,MAAA,GAAG,EAAEA,OAAb;AAAsB,MAAA,KAAK,EAAEA,OAA7B;AAAsC,MAAA,KAAK,EAAEA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,CADL,CAJJ,eAOI;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAPJ,eAQI;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,QAAQ,EAAE,KAAK9C,iBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKZ,WAAW,CAACgD,GAAZ,CAAiBU,OAAD,iBAAa;AAAQ,MAAA,GAAG,EAAEA,OAAb;AAAsB,MAAA,KAAK,EAAEA,OAA7B;AAAsC,MAAA,KAAK,EAAEA,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,CADL,CARJ,eAWI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,GAAG,EAAE,KAAKxC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAXJ,CADJ,CADJ,CADJ;AAsBH;;AAtG+B;;AAyGpC,eAAejB,KAAf","sourcesContent":["import React from 'react';\n\nconst countryList = [\n    \"GBP\", \"CAD\", \"USD\", \"AUD\", \"BGN\", \"BRL\", \"CHF\", \"CNY\", \"CZK\", \"DKK\", \"EUR\", \"HKD\", \"HRK\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"ISK\", \"JPY\", \"KRW\", \"MXN\", \"MYR\", \"NOK\", \"NZD\", \"PHP\", \"PLN\", \"RON\", \"RUB\", \"SEK\", \"SGD\", \"THB\", \"TRY\", \"ZAR\"\n]\n\nclass Chart extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            base: 'GBP',\n            other: 'USD',\n        }\n     this.handleChangeBase = this.handleChangeBase.bind(this);\n     this.handleChangeOther = this.handleChangeOther.bind(this);\n     this.buildChart = this.buildChart.bind(this);\n     this.getHistoricalRates = this.getHistoricalRates.bind(this);\n\n    }\n\n    componentDidMount() {\n        const { base, other } = this.state;\n        this.getHistoricalRates(base, other);\n    }\n\n\n    handleChangeBase = (e) => {\n         this.setState({base: e.target.value},this.getHistoricalRates);\n\n    }\n\n    handleChangeOther = (e) => {\n         this.setState({other: e.target.value},this.getHistoricalRates);\n\n        \n    }\n\n    buildChart = (labels, data, label) => {\n        const chartRef = this.chartRef.current.getContext(\"2d\");\n        if (typeof this.chart !== \"undefined\") {\n          this.chart.destroy();\n        }\n        this.chart = new Chart(this.chartRef.current.getContext(\"2d\"), {\n          type: 'line',\n          data: {\n            labels,\n            datasets: [\n              {\n                label: label,\n                data,\n                fill: false,\n                tension: 0,\n              }\n            ]\n          },\n          options: {\n            responsive: true,\n          }\n        })\n      }\n\n    getHistoricalRates = (base, other) => {\n        const endDate = new Date().toISOString().split('T')[0];\n        const startDate = new Date((new Date).getTime() - (30 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0];\n\n        fetch(`https://alt-exchange-rate.herokuapp.com/history?start_at=${startDate}&end_at=${endDate}&base=${base}&symbols=${other}`).then((response) => {\n\n        if (response.ok) {\n            return response.json();\n          }\n          throw new Error('Request was either a 404 or 500');\n           }).then(data => {\n          if (data.error) {\n            throw new Error(data.error);\n          }\n          const chartLabels = Object.keys(data.rates);\n          const chartData = Object.values(data.rates).map(rate => rate[other]);\n          const chartLabel = `${base}/${other}`;\n          this.buildChart(chartLabels, chartData, chartLabel);\n        })\n        .catch(error => console.error(error.message));\n    }\n\n    \n    \n    render () {\n        return (\n            <div>\n                <div className=\"welcomeOuter\">\n                    <div className=\"welcomeInner table-dark\">\n                        <h1 className=\"table-dark\">Historical Currency Rate Comparison</h1>\n                        <p className=\"table-dark\">Chart displays the past 30 days of currency rates selected</p>\n                        <p className=\"table-dark phoneView\">Base Currency:</p>\n                        <select className=\"phoneView\" onChange={this.handleChangeBase}>\n                            {countryList.map((country) => <option key={country} label={country} value={country}></option>)}\n                        </select>\n                        <p className=\"table-dark phoneView\">Comparison Currency</p>\n                        <select className=\"phoneView\" onChange={this.handleChangeOther}>\n                            {countryList.map((country) => <option key={country} label={country} value={country}></option>)}\n                        </select>\n                        <div className=\"table-dark\">\n                            <canvas ref={this.chartRef} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}